#! /usr/bin/perl

use strict;
use warnings;
use Errno ();
use File::Basename qw(dirname);
use Getopt::Long;
use Pod::Usage qw(pod2usage);
use XML::TreePP;

our $VERSION = '0.01';
our $DEFAULT_XSLT = "https://examp1e.net/benchart/benchart.xslt";

my $opt_file = "benchart.xml";
my @DEFAULT_OPTIONS = (
    "file=s" => \$opt_file,
);

sub cmd_help {
    pod2usage(0);
}

sub cmd_version {
    print "$VERSION\n";
}

sub cmd_try {
    my $opt_force;
    GetOptions(
        force => \$opt_force,
        @DEFAULT_OPTIONS,
    ) or exit 1;

    my $doc = load(1);
    die "command for the benchmark is already registered; use `--force` to update it\n"
        if ! $opt_force && $doc->{command};

    my $scores = run_bench(@ARGV);
    die "try failed; no benchmark data obtained\n"
        unless @$scores;
    $doc->{'try-command'} = {
        arg => [@ARGV],
    };

    save($doc);

    print "The command returned the following scores:\n\n";
    for my $score (@$scores) {
        print "    $score->[0]: $score->[1]\n";
    }
    print "\n";
    print "If the results look ok, run `$0 try-ok` to commit the result and the benchmark command\n";

}

sub cmd_try_ok {
    my $opt_force;
    GetOptions(
        force => \$opt_force,
        @DEFAULT_OPTIONS,
    ) or exit 1;

    my $doc = load(0);
    die "command not tested, run `$0 try [cmd...]` before running `try-ok`\n"
        unless defined $doc->{'try-command'};
    die "command for the benchmark is already registered; use `--force` to update it\n"
        if ! $opt_force && $doc->{command};

    $doc->{command} = $doc->{'try-command'};
    delete $doc->{'try-command'};

    save($doc);
}

sub cmd_record {
    my $name;
    GetOptions(
        "name=s" => \$name,
        @DEFAULT_OPTIONS,
    ) or exit 1;

    my $doc = load(0);
    die "command not registered; run `$0 try` and `$0 try-ok` befor running `$0 record`\n"
        unless defined $doc->{command};

    if (! defined $name) {
        my $tags = `git describe --exact-match --tags 2> /dev/null`;
        if ($tags eq '') {
            $tags = `git show --pretty=format:\%h HEAD 2> /dev/null | head -1`;
            die "failed to obtain name via git; please use --name=<name> to specify the name of the benchmark\n"
                unless $tags ne '';
        }
        $name = (split "\n", $tags)[0];
    }

    my $scores = run_bench(@{$doc->{command}->{arg}});
    die "the command did not emit any benchmark data\n"
        unless @$scores;

    $doc->{benchmark} ||= [];
    $doc->{benchmark} = [$doc->{benchmark}]
        if ref $doc->{benchmark} eq 'HASH';
    push @{$doc->{benchmark}}, {
        name  => $name,
        score => [
            +(map {
                +{
                    name  => $_->[0],
                    value => $_->[1],
                }
            } @$scores),
        ],
    };

    save($doc);
}

sub cmd_show {
    my $browser = "safari";
    GetOptions(
        "browser=s" => \$browser,
        @DEFAULT_OPTIONS,
    ) or exit 1;

    die "file $opt_file does not exist\n"
        unless -e $opt_file;

    exec "open", "-a", $browser, $opt_file;
    die "open(1) failed:$!";
}

sub load {
    my $fallback_to_default = shift;
    my $src = do {
        open my $fh, "<", $opt_file or do {
            return {}
                if $! == Errno::ENOENT && $fallback_to_default;
            die "failed to open file:$opt_file:$!";
        };
        local $/;
        <$fh>;
    };
    my $doc = XML::TreePP->new->parse($src)
        or die "failed to parse file:$opt_file";
    $doc->{benchart};
}

sub save {
    my $doc = shift;
    my $xml = XML::TreePP->new->write({ benchart => $doc });

    $xml =~ s{(\?>)}{$1\n<?xml-stylesheet type="text/xsl" href="$DEFAULT_XSLT"?>}s;

    open my $fh, ">", $opt_file
        or die "failed to open file:$opt_file:$!";
    print $fh $xml;
    close $fh;
}

sub run_bench {
    my @argv = @_;
    open my $fh, "-|", (@argv)
        or die "failed to exec $argv[0]:$!";
    my @ret;
    while (my $line = <$fh>) {
        $line =~ s/^\s*(.*)\s*$/$1/s;
        my @cols = split /(?:\s*:\s*|\s+)/, $line;
        if ($cols[1] =~ /^[0-9]+\.[0-9]+$/) {
            push @ret, [$cols[0], $cols[1]];
        }
    }
    close $fh
        or die "benchmark script failed with exit status:$?\n";
    \@ret;
}

sub xml_escape {
    my $s = shift;
    $s =~ s/&/&amp;/g;
    $s =~ s/</&lt;/g;
    $s =~ s/>/&gt;/g;
    $s =~ s/"/&quot;/g;
    $s =~ s/'/&#39;/g;
    $s;
}

sub main {
    die "no command\n"
        unless @ARGV;
    my $cmd = shift @ARGV;

    $cmd =~ m{^(try|try-ok|record|show|--help|--version)$}s
        or die "unknown command: $cmd\n";
    $cmd = $1;
    $cmd =~ s/^-+//s;
    $cmd = "cmd_$cmd";
    $cmd =~ tr/-/_/;
    no strict 'refs';
    &$cmd();
}

main();

__END__

=head1 NAME

benchart - benchmark recorder and visualizer

=head1 SYNOPSIS

  # setup the benchmark command
  $0 try -- benchmark-cmd args...

  # commit the benchmark command
  $0 try-ok

  # record the benchmark
  $0 record

  # show the results
  $0 show

=head1 DESCRIPTION

The command records the results of the conducted benchmarks in C<benchart.xml> which, when being opened by a web browser, draws a nice chart.

The benchmark script must emit a series of space-or-colon-separated lines that contains key-values pairs of the scores, and the scores look like numbers.
E.g. in case of SunSpider benchmark, the result of the benchmark program should look like:

3d/cube             14.1
3d/morph            5.3
3d/raytrace         13.0
access/binary-trees 3.0

=head1 OPTIONS

=head2 --file=file

Sets the name of the file to record the benchmarks (default: C<benchart.xml>).

=head2 --name=name

Sets the name of the benchmark being recorded by the benchmark-script.
If omitted, the name will be the Git commit id of the current directory, or the tag name if any.

=head2 --show[=progname]

Opens the benchmark chart using the specified web browser (defaults to Safari).
Note that Google Chrome cannot be used for viewing the charts unless you set the XSLT link to a local file.

=head2 --xsl[=/path/to/xsl-file]

Path of the XSLT file to be recorded in C<benchart.xml>.
The default path is C<https://examp1e.net/benchart/benchart.xlst>.
The path is reset to the default if an empty value is specified.

=head1 AUTHOR

Kazuho Oku

=head1 LICENSE

MIT

=cut
